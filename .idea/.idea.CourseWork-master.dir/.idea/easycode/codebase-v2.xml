<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="com.obiscr.chatgpt.settings.EasyCodeState">
    <option name="projectFiles" value="$PROJECT_DIR$/.vs/ProjectSettings.json;C:/Temp/coursework/CourseWork-master/.vs/VSWorkspaceState.json;C:/Temp/coursework/CourseWork-master/bin/Debug/net7.0-windows/Coursework.deps.json;C:/Temp/coursework/CourseWork-master/bin/Debug/net7.0-windows/Coursework.runtimeconfig.json;C:/Temp/coursework/CourseWork-master/Context/MyDbContext.cs;C:/Temp/coursework/CourseWork-master/Entities/Calculation.cs;C:/Temp/coursework/CourseWork-master/Entities/Feature.cs;C:/Temp/coursework/CourseWork-master/Entities/FeaturesMaterial.cs;C:/Temp/coursework/CourseWork-master/Entities/MaterialsCalculation.cs;C:/Temp/coursework/CourseWork-master/Entities/Role.cs;C:/Temp/coursework/CourseWork-master/Entities/Siding.cs;C:/Temp/coursework/CourseWork-master/Entities/Wall.cs;C:/Temp/coursework/CourseWork-master/Entities/Window.cs;C:/Temp/coursework/CourseWork-master/Entities/Worker.cs;C:/Temp/coursework/CourseWork-master/Entities/WorkerInformation.cs;C:/Temp/coursework/CourseWork-master/Metods/AddNewWorker.cs;C:/Temp/coursework/CourseWork-master/Navigation/AdministrationNavigation/AddNewWorker.xaml.cs;C:/Temp/coursework/CourseWork-master/Navigation/AdministrationNavigation/AddSidingPage.xaml.cs;C:/Temp/coursework/CourseWork-master/Navigation/AdministrationNavigation/AdministrationWindow.xaml.cs;C:/Temp/coursework/CourseWork-master/Navigation/AdministrationNavigation/ListWorker.xaml.cs;C:/Temp/coursework/CourseWork-master/Navigation/AdministrationNavigation/UpdateWorkerInformation.xaml.cs;C:/Temp/coursework/CourseWork-master/Navigation/AdministrationNavigation/WorkerUpdate.xaml.cs;C:/Temp/coursework/CourseWork-master/Navigation/ManagerNavigation/CalculatePage.xaml.cs;C:/Temp/coursework/CourseWork-master/Navigation/ManagerNavigation/CalculationsList.xaml.cs;C:/Temp/coursework/CourseWork-master/Navigation/ManagerNavigation/EditWall.xaml.cs;C:/Temp/coursework/CourseWork-master/Navigation/ManagerNavigation/EditWindow.xaml.cs;C:/Temp/coursework/CourseWork-master/Navigation/ManagerNavigation/MaterialsListPage.xaml.cs;C:/Temp/coursework/CourseWork-master/Navigation/ManagerNavigation/MenedgerWindow.xaml.cs;C:/Temp/coursework/CourseWork-master/App.xaml.cs;C:/Temp/coursework/CourseWork-master/AssemblyInfo.cs;C:/Temp/coursework/CourseWork-master/Authorization.xaml.cs" />
    <option name="forceFullIndex" value="false" />
    <option name="fileSummaryMaps" value="{&quot;C:/Temp/coursework/CourseWork-master&quot;:&quot;{\&quot;/App.xaml.cs\&quot;:\&quot;This App.xaml.cs file is the code-behind file for the App.xaml file in a WPF application.\\n\\nSome key things about it:\\n\\n- It defines a partial class called App that inherits from the Application class. This makes it the main application class.\\n\\n- It is marked as partial so that code can be added to the class in both App.xaml.cs and App.xaml. This allows splitting the class definition and implementation across files.\\n\\n- No code is implemented in this file, it just defines the class. The actual application startup and runtime logic would go here. \\n\\n- The main functions/purposes of this class include:\\n\\n  - Providing the entry point for the application via the Main() method.\\n\\n  - Setting up application-wide resources, styles, etc that are defined in App.xaml.\\n\\n  - Handling application-level events like Startup, Exit, UnhandledExceptions etc.\\n\\n  - Providing a single point of access to the running application instance.\\n\\n  - Coordinating the lifetime of windows/pages in the application.\\n\\nSo in summary, this file defines the core application class that coordinates the startup and execution of the WPF application defined in App.xaml. It serves as the central access point and coordinator for the app.\&quot;,\&quot;/Navigation/ManagerNavigation/MenedgerWindow.xaml.cs\&quot;:\&quot;This file defines the MenedgerWindow class which is used to display the manager\\u0027s navigation window.\\n\\nKey things it does:\\n\\n- Initializes the window and loads initial page (CalculatePage) into the navigation frame\\n- Retrieves the worker\\u0027s full name from the database and displays it\\n- Defines button click handlers to navigate to different pages:\\n  - CalculatePage\\n  - CalculationsList \\n  - MaterialsListPage\\n- Implements INotifyPropertyChanged to support updating UI when properties change\\n- Gets worker information from database on load\\n- Allows navigating to UpdateWorkerInformation page when full name label is clicked\\n\\nKey functions:\\n\\n- Constructor to initialize window \\n- GetFullName - Retrieves worker name from database\\n- CalculateButton_OnClick - Navigates to CalculatePage\\n- CalculationButton_OnClick - Navigates to CalculationsList\\n- ListMaterialsButton_OnClick - Navigates to MaterialsListPage\\n- OnPropertyChanged - Raises property changed event\\n- SetField - Sets property and raises event\\n- FullNameLabel_OnMouseLeftButtonUp - Navigates to update page\\n\\nSo in summary, it handles the navigation and loading of pages for the manager\\u0027s window.\&quot;,\&quot;/Entities/MaterialsCalculation.cs\&quot;:\&quot;This file defines a class called MaterialsCalculation that represents a calculation of materials needed for a project.\\n\\nKey things:\\n\\n- It has properties for the SidingId, CalculationId, Count of materials needed, and CurrentPrice of the material.\\n\\n- Siding and Calculation properties define relationships to other entities - it belongs to a specific Siding and Calculation.\\n\\n- This allows tracking the materials needed for each calculation, what siding/material it\\u0027s for, and linking it back to the overall calculation and siding entities. \\n\\n- No methods are defined, it\\u0027s simply a data model/entity class to represent a single row in a materials calculation table in the database.\\n\\n- The properties allow retrieving and setting the data as needed when working with materials calculations in the application.\\n\\nSo in summary, it\\u0027s a data model for a materials calculation that links to other entities and stores the key data for a single calculated need of a material for a project. No functions itself, just properties to represent the data.\&quot;,\&quot;/Navigation/ManagerNavigation/CalculatePage.xaml.cs\&quot;:\&quot;This file defines a CalculatePage class that represents the calculation page in a siding installation estimation application.\\n\\nKey functions:\\n\\n- Constructor that initializes the page and loads initial data\\n- Properties to bind UI elements to viewmodel data\\n- Event handlers for UI interactions like button clicks\\n- Methods to calculate totals from user input like wall area, material quantities\\n- Methods to display calculation results and material details\\n- Methods to save the calculation results to a database\\n- Notification property changed events to update the UI\\n\\nIn summary, this class:\\n\\n- Defines the data and logic for the calculation page \\n- Binds UI elements like textboxes and labels to viewmodel properties\\n- Handles user input to perform calculations\\n- Displays calculation results to the user\\n- Saves the completed calculation to a database\\n\\nSo it brings together the data model, calculation logic and UI handling for the key functionality of estimating siding installation costs on this page.\&quot;,\&quot;/Entities/FeaturesMaterial.cs\&quot;:\&quot;This FeaturesMaterial.cs file defines a class that represents a many-to-many relationship between Features and Siding entities in the Coursework.Entities namespace.\\n\\nKey things:\\n\\n- It has properties for the foreign keys - FeaturesId and SidingId to link to the related Feature and Siding entities.\\n\\n- It has a Value property to store additional data about the relationship.\\n\\n- It has virtual navigation properties Features and Siding to represent the relationships and allow lazy-loading of the related entities. \\n\\n- This allows a Feature to have multiple Sidings and vice versa, with the FeaturesMaterial class storing the join data.\\n\\nSo in summary, it:\\n\\n- Defines the join entity for a many-to-many relationship between Features and Siding\\n- Stores the foreign keys and any additional relationship data \\n- Provides navigation properties to lazily load related entities\\n\\nThe key functions are to represent and store the join data for the many-to-many relationship between Features and Siding in the database.\&quot;,\&quot;/Navigation/ManagerNavigation/MaterialsListPage.xaml.cs\&quot;:\&quot;This file defines the MaterialsListPage class which represents the materials list page in the navigation manager.\\n\\nKey things it does:\\n\\n- Implements INotifyPropertyChanged to support data binding of properties like SelectedSiding\\n- Defines properties like SelectedSiding, IsVisibleSelected\\n- Handles loading and filtering the list of sidings from the database on page load and on text search\\n- Updates the ListView\\u0027s ItemsSource binding when data is loaded or filtered  \\n- Handles selection change events for selecting a siding\\n\\nKey functions:\\n\\n- Constructor which initializes the page and loads initial data\\n- UpdateList() - Loads initial list of sidings from database\\n- UpdateListViewData() - Filters list based on search text\\n- SerchTextBox_OnTextChanged - Handles text changed event to filter list\\n- ComboType_OnSelectionChanged - Handles selection changed event \\n- OnPropertyChanged - Implements INPC notification\\n- SelectedSiding property - Gets/sets currently selected siding\\n\\nSo in summary, it manages the data binding and logic for displaying, filtering and selecting materials from the database for this page.\&quot;,\&quot;/Navigation/AdministrationNavigation/WorkerUpdate.xaml.cs\&quot;:\&quot;This file contains the code for updating or deleting a worker record in the database.\\n\\nKey functions:\\n\\n- UpdateInformationOnWorker() - Handles updating an existing worker record when the Update button is clicked. It validates the input, finds the worker by ID, updates the property values, and saves the changes to the database.\\n\\n- DeleteButtonBase_OnClick() - Handles deleting an existing worker record when the Delete button is clicked. It validates the input, finds the worker by ID, removes the worker from the related WorkerInformation, Calculations and Workers tables, and saves the changes to delete the worker record. \\n\\n- The class inherits from Window to create a window for displaying the worker update/delete form. \\n\\n- It uses the MyDbContext to query and save data to the database tables via LINQ queries and SaveChanges().\\n\\n- The data context and worker ID are passed into the constructor so it knows which record to load/update.\\n\\nSo in summary, it provides the UI and logic for updating or deleting a worker record in the database based on user input from the form.\&quot;,\&quot;/Navigation/ManagerNavigation/CalculationsList.xaml.cs\&quot;:\&quot;This file is for the CalculationsList page in a WPF application.\\n\\nKey functions:\\n\\n- LoadListWallCalculation() - Loads calculations joined with wall data from the database into a list\\n\\n- LoadListWindowCalculation() - Loads calculations joined with window data from the database into a list  \\n\\n- SerchTextBox_OnTextChanged() - Handles text changed event on the search text box to filter the list\\n\\n- UpdateMetod() - Filters the list based on search text and selected type (walls or windows)\\n\\n- ButtonBase_OnClick() - Handles click on edit button, opens edit form window/wall passing selected item \\n\\n- EditWindowOnClosing(), EditWallOnClosing() - Handles closing of edit forms to refresh the list\\n\\n- GetTypeSerchInfo_OnSelectionChanged() - Handles selection changed on type dropdown, loads appropriate list \\n\\n- LoadRoles() - Loads options for type dropdown (walls, windows)\\n\\nSo in summary, it loads calculation data from the database, allows filtering/searching, and opens edit forms to update the data, refreshing the list on close of edit forms.\&quot;,\&quot;/.vs/ProjectSettings.json\&quot;:\&quot;The ProjectSettings.json file is used by Visual Studio to store project-specific settings.\\n\\nSome key things about this file:\\n\\n- It is located in the .vs folder inside the project directory. The .vs folder contains Visual Studio-specific files and settings.\\n\\n- It stores the \\\&quot;CurrentProjectSetting\\\&quot; which specifies the active project configuration (e.g. Debug, Release etc). In this example it is set to null which means no configuration is selected.\\n\\n- It allows Visual Studio to remember things like the last opened configuration, startup project, debugging settings etc when a solution is opened.\\n\\n- Visual Studio uses this file to persist project-specific state between sessions so things like breakpoints, editor positions etc are maintained.\\n\\n- The settings in this file are specific to a particular user\\u0027s configuration of the project within Visual Studio. It is not part of the project/solution itself.\\n\\n- If deleted, Visual Studio will recreate it with default settings the next time the solution is opened.\\n\\nSo in summary, it stores persistent per-user per-project settings that Visual Studio uses to maintain state across sessions for things like configurations, startup options and debugging behavior.\&quot;,\&quot;/Navigation/AdministrationNavigation/UpdateWorkerInformation.xaml.cs\&quot;:\&quot;This file handles updating worker information in the administration section of the application.\\n\\nKey functions:\\n\\n- AreAllRequiredFieldsFilled - Checks if all required fields like name, login, password are filled\\n- IsExistingWorker - Checks if entered login already exists \\n- IsExistingPhone, IsExistingEmail - Checks if entered contact details already exist\\n- IsValidEmail, IsValidPhone - Validates format of email and phone\\n- ExitProfileButton_OnClick - Exits to authorization page\\n- UpdateWorkerInformation_OnLoaded - Loads existing worker data to populate form \\n- UpDateButton_OnClick - Handles updating worker data in database\\n   - Checks for errors\\n   - Updates worker and worker information entities\\n   - Handles concurrency exceptions\\n- IsLoginUnchanged - Checks if login was changed\\n\\nIn summary, it:\\n\\n- Displays a form to edit worker details \\n- Validates input\\n- Checks for duplicate/existing values\\n- Updates the worker and worker information entities in the database on submit\\n- Handles errors and concurrency exceptions\\n\\nSo the key purpose is to allow updating and validating worker profile details in the administration section.\&quot;,\&quot;/bin/Debug/net7.0-windows/Coursework.runtimeconfig.json\&quot;:\&quot;This file is the runtime configuration file for a .NET 7 desktop application project.\\n\\nKey functions:\\n\\n- Specifies the target framework (tfm) as .NET 7.0\\n- Lists the frameworks that the application depends on - in this case .NET Core 7.0 and Windows Desktop 7.0\\n- Configures runtime properties and settings:\\n  - Enables NullabilityInfoContext which provides nullability information for reflection\\n  - Enables unsafe deserialization using BinaryFormatter for serialization\\n\\nIn summary, the runtimeconfig.json file:\\n\\n- Defines the target framework and dependencies \\n- Configures runtime behavior and settings\\n- Provides configuration for the .NET runtime when running the application\\n\\nIt allows the application to specify requirements and configure runtime options to ensure proper execution of the .NET application. So it provides important configuration details for the runtime environment.\&quot;,\&quot;/Authorization.xaml.cs\&quot;:\&quot;This file contains the code for the authorization window in a WPF application.\\n\\nKey functions:\\n\\n- Authorization() constructor - Initializes the window.\\n\\n- AuthorizatiorButton_OnClick event handler - Called when the authorization button is clicked. Calls the Authentication() method. \\n\\n- Authentication() method - Handles the authentication logic:\\n\\n  - Validates username and password are not empty\\n\\n  - Trims whitespace from inputs\\n\\n  - Queries the database context to find a worker matching the username and password\\n\\n  - Checks the worker\\u0027s role and opens the appropriate window (AdministrationWindow or MenedgerWindow) on success\\n\\n  - Shows error messages on failure\\n\\n- Uses Entity Framework Core to query the database via the MyDbContext and include related role data\\n\\n- Closes the authorization window and opens the appropriate window for the authenticated user\\u0027s role on successful login\\n\\n- Handles exceptions and shows error messages if authentication fails\\n\\nSo in summary, it provides the login form and authentication logic to validate a user against the database and route them to the correct area of the application based on their role.\&quot;,\&quot;/Navigation/AdministrationNavigation/AddNewWorker.xaml.cs\&quot;:\&quot;This file is for adding a new worker (user) to the system.\\n\\nKey functions:\\n\\n- LoadRoles() - Loads all roles from the database and sets as the items source for the RoleComboBox dropdown\\n\\n- AddButton_Click() - Handles clicking the Add button, calls AddNewUser() method\\n\\n- AddNewUser() - Main logic for adding a new worker:\\n\\n  - Validates required fields are filled\\n\\n  - Checks for existing worker with same login/phone/email\\n\\n  - Checks email and phone are valid format\\n\\n  - Adds new Worker and WorkerInformation entities to database\\n\\n  - Handles any database errors\\n\\n- CheckEmail(), CheckPhone() - Helper methods to validate email and phone formats\\n\\n- Selector_OnSelectionChanged() - Handles selecting a role in the dropdown, saves the selected role ID\\n\\nSo in summary, it provides the UI and logic to collect worker details from the user, validate the inputs, check for duplicates, and add a new worker record to the database on click of the Add button.\&quot;,\&quot;/Navigation/ManagerNavigation/EditWall.xaml.cs\&quot;:\&quot;This file defines a WPF window class called EditWall that allows editing wall properties and recalculating siding requirements.\\n\\nKey functions:\\n\\n- NewCountSiding() - Handles the click event of the calculate button. Parses input, queries the database, calculates new siding count, and updates the database.\\n\\n- CalculateTotal() - Calculates the total wall area, window area, and required siding area for the calculation. Updates the database with new wall properties if changed. \\n\\n- ReplaceDotWithComma() - Helper function to replace decimal points with commas in textboxes for localization.\\n\\n- PropertyChanged event - Implements INotifyPropertyChanged for data binding.\\n\\n- Constructor - Initializes the window and sets the data context. \\n\\n- Loaded event handler - Calls ReplaceDotWithComma on load.\\n\\nThis window allows the user to edit details of a single wall, recalculate the required siding count based on the wall/window areas, and update the database with the new values. The key functions handle the calculation logic and database updates.\&quot;,\&quot;/.vs/VSWorkspaceState.json\&quot;:\&quot;The .vs/VSWorkspaceState.json file is used by Visual Studio to store the workspace state between sessions.\\n\\nSome key things it does:\\n\\n- Stores the expanded/collapsed state of nodes in Solution Explorer. The \\\&quot;ExpandedNodes\\\&quot; property contains a list of nodes that were expanded the last time the solution was open.\\n\\n- Remembers whether Solution Explorer was in \\\&quot;Preview\\\&quot; mode or not. The \\\&quot;PreviewInSolutionExplorer\\\&quot; property is a boolean that indicates if the preview pane was visible. \\n\\n- Allows Visual Studio to restore the workspace to the same state it was in during the previous session. This includes things like which files were open, breakpoints, debugger settings etc. \\n\\n- Is project-specific, so the workspace state is maintained on a per-solution/project basis rather than globally.\\n\\n- Is a JSON file format for easy parsing/writing of the state data by Visual Studio.\\n\\n- Helps provide continuity and persistence of the development environment between coding sessions. Developers don\\u0027t have to manually re-configure windows/settings each time.\\n\\nSo in summary, its key functions are to store and restore the Visual Studio workspace configuration and state over multiple sessions.\&quot;,\&quot;/Entities/Role.cs\&quot;:\&quot;This Role.cs file defines a Role entity class for a coursework project.\\n\\nKey things it does:\\n\\n- Defines a Role class with RoleId and Name properties\\n- RoleId is the primary key \\n- Name property is required and cannot be null\\n- Has a virtual ICollection property Workers to represent a one-to-many relationship to Worker entities\\n- Workers is initialized to an empty list\\n\\nKey functions:\\n\\n- Stores role identification data like ID and name\\n- Associates roles to workers through the Workers collection property \\n- Allows retrieval of workers for a given role\\n- Provides an entity to represent roles in the data model\\n\\nSo in summary, it defines the Role entity with its basic properties and relationship to Worker entities, to model role data and role-worker assignments within the coursework project data model. The Role class can then be used throughout the application to work with role data.\&quot;,\&quot;/Metods/AddNewWorker.cs\&quot;:\&quot;This file contains a class called AddNewUser that allows adding a new user to the database.\\n\\nKey things it does:\\n\\n- Defines a class called AddNewUser\\n- Has properties for login, password, and roleId to store user details\\n- Contains a method called AddNewUser2 that takes in login, password, roleId and DbContext as parameters\\n- Creates a new Worker entity with the passed in login, password and roleId\\n- Adds the new Worker entity to the DbContext \\n- Saves the changes to persist the new user to the database\\n\\nSo in summary, it provides a way to programmatically add a new user record to the database by:\\n\\n1. Accepting user details as parameters\\n2. Creating a Worker entity \\n3. Adding it to the DbContext\\n4. Saving the changes to persist to the database\\n\\nThe key function is AddNewUser2 which handles actually creating and saving the new user record.\&quot;,\&quot;/Navigation/ManagerNavigation/EditWindow.xaml.cs\&quot;:\&quot;This file contains the EditWindow class which is used to edit calculation data in the application.\\n\\nKey functions:\\n\\n- NewCountSiding() - Main function called when the update button is clicked. It retrieves the calculation data, calculates the new siding count based on updated window dimensions, and saves the changes to the database.\\n\\n- CalculateTotal() - Calculates the total wall area, total window area, and required siding area based on the calculation ID. Used to calculate the new siding count. \\n\\n- ReplaceDotWithComma() - Replaces decimal points with commas in textboxes, presumably for localization/formatting.\\n\\n- PropertyChanged event - Implements INotifyPropertyChanged for data binding. \\n\\n- OnPropertyChanged() - Raises the PropertyChanged event when a property is updated.\\n\\n- FrameworkElement_OnLoaded - Event handler for the window loaded event. Calls ReplaceDotWithComma.\\n\\n- ButtonBase_OnClick - Event handler for the update button click. Calls NewCountSiding().\\n\\nSo in summary, it allows editing an existing calculation by updating window dimensions, recalculating the siding count, and saving the changes back to the database via the MyDbContext. Implements data binding and formatting as well.\&quot;,\&quot;/Navigation/AdministrationNavigation/AddSidingPage.xaml.cs\&quot;:\&quot;This file defines a Page class called AddSidingPage that is used to add new siding records to the database.\\n\\nKey functions:\\n\\n- AddButton_OnClick - Handles clicking the Add button. Validates input, saves new siding record and feature materials to database.\\n\\n- BrowseImage_OnClick - Opens file dialog to select an image and loads it into the UI.\\n\\n- AddImage - Opens file dialog and loads selected image into UI. Saves image bytes. \\n\\n- IsNumber - Validates if a string contains only numeric characters.\\n\\n- TextBox_PreviewTextInput - Handles text input preview events for textboxes, validating only numeric input.\\n\\n- WidthTextBox_OnPreviewTextInput, LengthTextBox_OnPreviewTextInput, ThicknessTextBox_OnPreviewTextInput - Handle specific textbox preview input events to validate numbers.\\n\\nIt allows the user to enter siding details like title, description, price etc. Select an image file. Saves the new siding record and associated feature materials to the database on clicking Add. Validates input and handles image selection/loading.\&quot;,\&quot;/Navigation/AdministrationNavigation/AdministrationWindow.xaml.cs\&quot;:\&quot;This file defines the AdministrationWindow class which represents the main window for the administration functionality.\\n\\nKey things it does:\\n\\n- Initializes the window and navigates to the AddSidingPage on load, passing in the current worker\\n- Defines button click handlers to navigate to different admin pages\\n  - AddSidingButton navigates to AddSidingPage\\n  - AddNewWorkerButton navigates to AddNewWorker page\\n  - CalculationsList navigates to CalculationsList page\\n  - ListWorkerButton navigates to ListWorker page\\n- Gets the full name of the current worker from the database and displays it\\n- Handles navigation between pages using the AdministrationFrame frame\\n- Implements INotifyPropertyChanged for property change notifications\\n\\nKey functions:\\n\\n- Constructor - initializes the window \\n- Button click handlers - navigate to different pages\\n- GetFullName - gets worker name from DB and displays\\n- OnPropertyChanged - notifies of property changes\\n- SetField - helper to set properties and raise change events\\n\\nSo in summary, it sets up the main admin window and handles navigation between different admin related pages and functionality.\&quot;,\&quot;/Navigation/AdministrationNavigation/ListWorker.xaml.cs\&quot;:\&quot;This file is for displaying and managing a list of workers in the administration navigation section of the application.\\n\\nKey functions:\\n\\n- LoadWorker() - Loads the initial worker data on page load by calling GetListWorkers()\\n\\n- GetListWorkers() - Queries the database context to get a list of worker information objects, maps them to an anonymous type for display, and sets the data grid items source \\n\\n- ButtonBase_OnClick - Handles clicking the edit button, opens a WorkerUpdate window passing the selected worker, and refreshes the list on close\\n\\n- WorkerUpdateOnClosing - Event handler that refreshes the worker list when the edit window closes \\n\\nSo in summary, it:\\n\\n- Loads and displays a list of workers from the database in a data grid\\n- Allows editing an individual worker by opening a edit window \\n- Refreshes the list after editing to show any changes\\n\\nThe main purpose is to provide an interface to view, select, and edit worker records from the administration section of the app.\&quot;,\&quot;/AssemblyInfo.cs\&quot;:\&quot;The AssemblyInfo.cs file in a WPF project contains attributes that provide metadata about the assembly. Some key things it does:\\n\\n- Identifies the theme dictionaries for the application. In this case it specifies that theme-specific resources should be searched for in the assembly containing the theme (ResourceDictionaryLocation.SourceAssembly) and not in a separate location.\\n\\n- Allows specifying properties like assembly title, description, company, product, copyright, etc. These are used by tools like ClickOnce to identify the assembly. \\n\\n- Sets the assembly version number which is used for binding, deployment, etc. \\n\\n- Marks the assembly for localization by specifying neutral languages.\\n\\n- Enables linking of satellite assemblies for localization.\\n\\n- Specifies security transparency and other security related attributes.\\n\\n- Identifies icons, default namespaces and other application-level metadata.\\n\\nSo in summary, the key functions of the AssemblyInfo.cs file are:\\n\\n- Provide metadata about the assembly like title, version, copyright etc.\\n- Configure localization and theme resources locations\\n- Set attributes for security, linking etc.\\n- Identify application-level properties for tools and deployment\\n\\nIt centralizes assembly-level attributes in one place that tools can read from.\&quot;,\&quot;/Entities/Feature.cs\&quot;:\&quot;This file defines a Feature entity class for a Coursework project.\\n\\nKey things:\\n\\n- It defines a Feature class in the Coursework.Entities namespace\\n- Feature has properties for:\\n  - FeaturesId (primary key)\\n  - TypeParsing \\n  - Title\\n- It has a virtual ICollection property FeaturesMaterials to define a one-to-many relationship with another entity FeaturesMaterial\\n- FeaturesMaterials is initialized to an empty list\\n\\nKey functions:\\n\\n- Defines the data structure of a Feature object with its properties\\n- Establishes a relationship between Feature and FeaturesMaterial entities via the FeaturesMaterials property\\n- Allows retrieval and setting of Feature property values via getters and setters\\n- Provides a way to represent and work with Feature data in the application\\n\\nIn summary, this file defines the Feature entity class which represents feature objects in the data model and establishes relationships to other entities. It provides the data structure for features that can then be used elsewhere in the application.\&quot;,\&quot;/Entities/Window.cs\&quot;:\&quot;This file defines a Window entity class for a coursework project.\\n\\nKey things:\\n\\n- It is in the Coursework.Entities namespace\\n- Window is a public class\\n- It has properties for the window ID, calculation ID it belongs to, length, width, and count\\n- Length, Width and Count are decimal and byte types respectively \\n- It has a virtual navigation property Calculation to link to the parent Calculation entity\\n- This allows retrieving the Calculation that a Window belongs to in a one-to-many relationship\\n\\nKey functions:\\n\\n- Gets and sets the value of the entity properties like ID, length, width etc. This allows populating and retrieving the property values\\n- Calculation navigation property allows accessing the linked Calculation entity that a window belongs to\\n\\nIn summary, it defines the Window entity with its properties and relationship to Calculation. This allows storing window data and linking it to calculations in the database via the Entity Framework.\&quot;,\&quot;/bin/Debug/net7.0-windows/Coursework.deps.json\&quot;:\&quot;This file is a dependencies.json file that contains information about the dependencies of a .NET project.\\n\\nSome key things it does:\\n\\n- Defines the target framework (.NET Core App 7.0)\\n- Lists all the direct and transitive dependencies of the project and their versions\\n- Provides metadata about each dependency like its type (package/project), path to the package files, SHA hashes etc. \\n\\nKey functions:\\n\\n- Resolves and tracks dependencies and their versions\\n- Ensures dependencies are available and match expected versions\\n- Provides metadata for package restore/installation \\n- Helps determine what needs to be restored/installed when dependencies change\\n- Acts as a lock file to ensure a reproducible dependency graph\\n\\nIn summary, it:\\n\\n- Defines the project\\u0027s dependency graph\\n- Tracks dependency metadata \\n- Ensures consistent and reproducible dependency resolution\\n- Facilitates package/dependency management tasks like restore, install etc.\\n\\nSo in one file, it captures all information needed about a project\\u0027s dependencies and their resolution. This allows tools/scripts to reliably determine dependency requirements and manage the dependencies.\&quot;,\&quot;/Entities/Siding.cs\&quot;:\&quot;This file defines the Siding entity class for the Coursework project.\\n\\nKey points:\\n\\n- It defines a Siding class with properties like SidingId, Title, Description, Price, Image etc. \\n\\n- Image property uses BitmapImage type to store image data.\\n\\n- It has navigation properties FeaturesMaterials and MaterialsCalculations to define relationships with other entities.\\n\\n- FeaturesMaterials is a collection of FeaturesMaterial entities related to this siding. \\n\\n- MaterialsCalculations is a collection of MaterialsCalculation entities related to this siding.\\n\\n- Default values are provided for collection properties.\\n\\n- Data annotations are used like Column attribute to map properties to database columns.\\n\\nSo in summary, this class defines the Siding entity/model and its properties. It will be used to represent siding data in the database and application. The navigation properties define relationships with other related entities.\&quot;,\&quot;/Context/MyDbContext.cs\&quot;:\&quot;This MyDbContext.cs file defines the DbContext for the Entity Framework Core database context used in the application.\\n\\nKey functions:\\n\\n- Defines the DbSet properties for each entity class, which represent the tables in the database.\\n\\n- Configures the database connection string in OnConfiguring().\\n\\n- Configures the model and relationships between entities in OnModelCreating(). This includes things like primary keys, foreign keys, data types etc. \\n\\n- Defines conversion methods to convert between byte arrays and BitmapImage for the Siding image property.\\n\\n- Partially implements OnModelCreating() to allow splitting the model configuration across multiple files for readability.\\n\\nSo in summary, it:\\n\\n- Defines the DbContext class\\n- Configures the database connection\\n- Maps the entity classes to tables and defines relationships between them\\n- Provides conversion methods for image property\\n- Allows splitting model configuration across files\\n\\nThis allows Entity Framework to map the .NET classes and properties to the underlying database tables and columns, and handle CRUD operations when saving/querying data.\&quot;,\&quot;/Entities/WorkerInformation.cs\&quot;:\&quot;This file defines a WorkerInformation class that represents information about a worker.\\n\\nKey things:\\n\\n- It is in the Coursework.Entities namespace\\n- It has properties for:\\n  - WorkerInformation1 (not sure what this is for)\\n  - WorkerId (unique id for the worker)\\n  - FirstName, SecondName, LastName (name fields)\\n  - Email, Phone (contact details)\\n- It has a virtual Worker property that links to the associated Worker entity\\n\\nThis class is likely used to store and retrieve detailed information about a worker, separate from the core Worker entity. Some key functions:\\n\\n- Allows storing and retrieving a worker\\u0027s name, contact details etc\\n- Links a WorkerInformation object to its parent Worker entity \\n- Can be used in databases/data access to persist worker information\\n- Provides a model/object to work with worker data in code\\n\\nSo in summary, it defines a class to represent and work with detailed information about a worker, separate from the core Worker entity definition.\&quot;,\&quot;/Entities/Calculation.cs\&quot;:\&quot;This file defines a Calculation entity class for a coursework project.\\n\\nThe Calculation class:\\n\\n- Represents a calculation object with properties like an ID, worker ID, title, date ordered etc.\\n\\n- Has navigation properties for related entities like MaterialsCalculations, Walls, Windows. These allow retrieving related objects.\\n\\n- Has a virtual Worker property for lazy loading the related worker object.\\n\\nKey functions:\\n\\n- Stores calculation data like ID, title, date etc. \\n\\n- Defines relationships to other entities like materials, walls, windows through navigation properties.\\n\\n- Allows retrieving related objects easily through these navigation properties.\\n\\n- Lazy loads the related worker object when needed through the virtual Worker property.\\n\\nSo in summary, it defines the Calculation entity with its properties and relationships to other entities to model calculations within the coursework domain. This allows storing calculation data and retrieving related objects as needed.\&quot;,\&quot;/Entities/Wall.cs\&quot;:\&quot;This file defines a Wall class that represents a wall entity in the system.\\n\\nKey things:\\n\\n- It defines properties for the unique WallId, the CalculationId it belongs to, its Length, Width, and Count.\\n\\n- CalculationId is a foreign key to link the wall to a Calculation entity. \\n\\n- Calculation is a navigation property to easily access the associated Calculation object.\\n\\n- Properties use auto-properties with public get/set accessors.\\n\\n- Count is likely used to track how many of this wall type are included in the calculation.\\n\\n- Length and Width store the dimensional properties of the wall. \\n\\n- WallId is likely the primary key to uniquely identify each wall record.\\n\\nSo in summary, this class:\\n\\n- Defines the data model/properties for a wall entity\\n- Links a wall to a calculation via foreign key \\n- Allows easy navigation to the associated calculation\\n- Stores dimensional and count properties of individual walls\\n- Provides a unique identifier for each wall record\\n\\nThe key functions are really just getting/setting the property values - there is no additional logic defined in this class. It focuses on the data model/structure.\&quot;,\&quot;/Entities/Worker.cs\&quot;:\&quot;This file defines the Worker entity class for a .NET Core application using Entity Framework Core.\\n\\nKey things:\\n\\n- It defines the properties of a Worker object like ID, role ID, login, password etc. \\n\\n- It has navigation properties like Calculations, Role, and WorkerInformations to define relationships to other entities.\\n\\n- Calculations is a collection of Calculation objects this worker is associated with. \\n\\n- Role is a single Role object defining this worker\\u0027s role. \\n\\n- WorkerInformations is a collection of additional information objects for this worker.\\n\\n- The properties use data annotations like [DatabaseGenerated] to configure how the properties are mapped to the database.\\n\\n- It implements POCO (plain old CLR object) pattern to represent a worker in the domain model.\\n\\n- This class will be used by Entity Framework to map workers to database tables, perform CRUD operations, and represent relationships between worker and other entities.\\n\\nSo in summary, it defines the Worker entity and its relationships to other entities that will be used by Entity Framework for data access and object-relational mapping.\&quot;}&quot;}" />
  </component>
</project>